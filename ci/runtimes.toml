[node]
entry = "tests.js"
versions = ["22", "21.0", "20.0", "19.0", "18.0", "16.0", "14.5", "22-mjs", "21.0-mjs", "20.0-mjs", "19.0-mjs", "18.0-mjs", "16.0-mjs", "14.5-mjs"]
commands = { install = "npm install", start = "sh helpers/server.sh" }
formatter = { prepare = "npm i -g @biomejs/biome", check = "biome format .", write = "biome format --write ." }
tools = "node --version && npm --version && npx --version && pnpm --version && yarn --version"

[deno]
entry = "tests.ts"
versions = ["2.0", "1.46", "1.40", "1.35", "1.24", "1.21"]
commands = { install = "deno cache tests.ts", start = "sh helpers/server.sh" }
formatter = { prepare = "echo \"Using native formatter\"", check = "deno fmt --check", write = "deno fmt" }
tools = "deno --version && npm --version && npx --version && pnpm --version && yarn --version"

[python]
entry = "tests.py"
versions = ["3.12", "3.11", "3.10", "3.9", "3.8", "ml-3.11"]
commands = { install = "pip install --no-cache-dir -r requirements.txt", start = "sh helpers/server.sh" }
formatter = { prepare = "pip install ruff", check = "ruff format --check", write = "ruff format" }
tools = "python --version && pip --version"

[dart]
entry = "lib/tests.dart"
versions = ["3.5", "3.3", "3.1", "3.0", "2.19", "2.18", "2.17", "2.16", "2.15"]
commands = { install = "dart pub get", start = "sh helpers/server.sh" }
formatter = { prepare = "echo \"Using native formatter\"", check = "dart format -o none --set-exit-if-changed .", write = "dart format ." }
tools = "dart --version"

[ruby]
entry = "tests.rb"
versions = ["3.3", "3.2", "3.1", "3.0", ]
commands = { install = "", start = "sh helpers/server.sh" }
formatter = { prepare = "gem install rubocop", check = "rubocop --lint .", write = "rubocop --fix-layout --lint ." }
tools = "ruby --version && gem --version"

[php]
entry = "tests.php"
versions = ["8.3", "8.2", "8.1", "8.0"]
commands = { install = "composer update --no-interaction --ignore-platform-reqs --optimize-autoloader --prefer-dist --no-dev", start = "sh helpers/server.sh" }
formatter = { prepare = "composer require laravel/pint", check = "./vendor/bin/pint --test", write = "./vendor/bin/pint" }
tools = "php --version && composer --version"

[swift]
entry = "Tests.swift"
versions = ["5.10", "5.9", "5.8", "5.5",]
commands = { install = "", start = "sh helpers/server.sh" }
formatter = { prepare = "rm -rf SwiftFormat && git clone https://github.com/nicklockwood/SwiftFormat && cd SwiftFormat && swift build -c release && mv /mnt/code/SwiftFormat/.build/x86_64-unknown-linux-gnu/release/swiftformat /tmp/swiftformat && cd .. && rm -rf SwiftFormat", check = "/tmp/swiftformat . --lint --swiftversion 5.5", write = "/tmp/swiftformat . --verbose --swiftversion 5.5" }
tools = "swift --version"

[kotlin]
entry = "Tests.kt"
versions = ["2.0", "1.9", "1.8", "1.6"]
commands = { install = "", start = "sh helpers/server.sh" }
formatter = { prepare = "apk add curl && curl -sSLO https://github.com/pinterest/ktlint/releases/download/1.3.1/ktlint && chmod a+x ktlint && mv ktlint /usr/local/bin/", check = "ktlint .", write = "ktlint --format ." }
tools = "sh gradlew --version"

[java]
entry = "Tests.java"
versions = ["22", "21.0", "18.0", "17.0", "11.0", "8.0"]
commands = { install = "", start = "sh helpers/server.sh" }
formatter = { prepare = "curl -sSLO https://github.com/google/google-java-format/releases/download/v1.22.0/google-java-format-1.22.0-all-deps.jar && chmod a+x google-java-format-1.22.0-all-deps.jar && mv google-java-format-1.22.0-all-deps.jar /tmp/google-java-format.jar", check = "find ./ -name \"*.java\" -type f -print | xargs java -jar /tmp/google-java-format.jar --set-exit-if-changed --dry-run", write = "find ./ -name \"*.java\" -type f -print | xargs java -jar /tmp/google-java-format.jar --replace" }
tools = "sh gradlew --version"

[cpp]
entry = "tests.cc"
versions = ["20", "17"]
commands = { install = "", start = "sh helpers/server.sh" }
formatter = { prepare = "apk add coreutils git clang-extra-tools", check = "find ./ -iname '*.h' -o -iname '*.cpp' | xargs clang-format -i --Werror --dry-run", write = "find ./ -iname '*.h' -o -iname '*.cpp' | xargs clang-format -i --Werror" }
tools = "cmake --version && make --version"

[dotnet]
entry = "Tests.cs"
versions = ["8.0", "7.0", "6.0"]
commands = { install = "", start = "sh helpers/server.sh" }
formatter = { prepare = "export PATH=\"$PATH:/root/.dotnet/tools\" && dotnet tool install --global csharpier", check = "dotnet csharpier --check .", write = "dotnet csharpier ." }
tools = "dotnet --version"

[go]
entry = "tests.go"
versions = ["1.23"]
commands = { install = "", start = "sh helpers/server.sh" }
formatter = { prepare = "echo \"Using native formatter\"", check = "if [ \"$(gofmt -s -l . | wc -l)\" -gt 0 ]; then echo 'Formatting errors:' && gofmt -s -l . && exit 1; fi", write = "gofmt -w -s ." }
tools = "go --version"

[bun]
entry = "tests.ts"
versions = ["1.1", "1.0"]
commands = { install = "bun install", start = "sh helpers/server.sh" }
formatter = { prepare = "echo \"Using bunx biome formatter\"", check = "bunx @biomejs/biome format .", write = "bunx @biomejs/biome format --write ." }
tools = "bun --version && npm --version && npx --version && pnpm --version && yarn --version"

[static]
versions = ["1"]
commands = { install = "sh build.sh", start = "sh helpers/server.sh" }
formatter = { prepare = "echo No formatter preparations.", check = "echo No formatter checker.", write = "echo No formatter writer." }
tools = "static-web-server --version"