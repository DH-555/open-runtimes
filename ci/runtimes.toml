[node]
entry = "tests.js"
versions = ["21.0", "20.0", "19.0", "18.0", "16.0", "14.5", "21.0-mjs", "20.0-mjs", "19.0-mjs", "18.0-mjs", "16.0-mjs", "14.5-mjs"]
commands = { install = "npm install", start = "pm2 start src/server.js --no-daemon" }
formatter = { prepare = "npm i -g @biomejs/biome", check = "biome format .", write = "biome format --write ." }

[deno]
entry = "tests.ts"
versions = ["1.40", "1.35", "1.24", "1.21"]
commands = { install = "deno cache tests.ts", start = "denon start" }
formatter = { prepare = "echo \"Using native formatter\"", check = "deno fmt --check", write = "deno fmt" }

[python]
entry = "tests.py"
versions = ["3.12", "3.11", "3.10", "3.9", "3.8", "ml-3.11"]
commands = { install = "pip install --no-cache-dir -r requirements.txt", start = "python3 src/server.py" }
formatter = { prepare = "apk add git && pip install git+https://github.com/psf/black", check = "black --check .", write = "black ." }

[dart]
entry = "lib/tests.dart"
versions = ["3.3", "3.1", "3.0", "2.19", "2.18", "2.17", "2.16", "2.15"]
commands = { install = "dart pub get", start = "src/function/server" }
formatter = { prepare = "echo \"Using native formatter\"", check = "dart format -o none --set-exit-if-changed .", write = "dart format ." }

[ruby]
entry = "tests.rb"
versions = ["3.3", "3.2", "3.1", "3.0", ]
commands = { install = "", start = "bundle exec puma -b tcp://0.0.0.0:3000 -e production" }
formatter = { prepare = "gem install rubocop", check = "rubocop --lint .", write = "rubocop --fix-layout --lint ." }

[php]
entry = "tests.php"
versions = ["8.0", "8.1", "8.2", "8.3"]
commands = { install = "composer update --no-interaction --ignore-platform-reqs --optimize-autoloader --prefer-dist --no-dev", start = "php src/server.php" }
formatter = { prepare = "composer require laravel/pint", check = "./vendor/bin/pint --test", write = "./vendor/bin/pint" }

[swift]
entry = "Tests.swift"
versions = ["5.9", "5.8", "5.5", ]
commands = { install = "", start = "src/function/Runtime serve --env production --hostname 0.0.0.0 --port 3000" }

[kotlin]
entry = "Tests.kt"
versions = ["1.9", "1.8", "1.6"]
commands = { install = "", start = "java -jar src/function/kotlin-runtime-1.0.0.jar" }
formatter = { prepare = "apk add curl && curl -sSLO https://github.com/pinterest/ktlint/releases/download/1.3.1/ktlint && chmod a+x ktlint && mv ktlint /usr/local/bin/", check = "ktlint .", write = "ktlint --format ." }

[java]
entry = "Tests.java"
versions = ["21.0", "18.0", "17.0", "11.0", "8.0"]
commands = { install = "", start = "java -jar src/function/java-runtime-1.0.0.jar" }
formatter = { prepare = "curl -sSLO https://github.com/google/google-java-format/releases/download/v1.22.0/google-java-format-1.22.0-all-deps.jar && chmod a+x google-java-format-1.22.0-all-deps.jar && mv google-java-format-1.22.0-all-deps.jar /tmp/google-java-format.jar", check = "find ./ -name \"*.java\" -type f -print | xargs java -jar /tmp/google-java-format.jar --set-exit-if-changed --dry-run", write = "find ./ -name \"*.java\" -type f -print | xargs java -jar /tmp/google-java-format.jar --replace" }

[cpp]
entry = "tests.cc"
versions = ["20", "17"]
commands = { install = "", start = "src/function/cpp_runtime" }

[dotnet]
entry = "Tests.cs"
versions = ["8.0", "7.0", "6.0"]
commands = { install = "", start = "dotnet src/function/DotNetRuntime.dll" }

[go]
entry = "tests.go"
versions = ["1.22"]
commands = { install = "", start = "src/function/server" }
formatter = { prepare = "echo \"Using native formatter\"", check = "if [ \"$(gofmt -s -l . | wc -l)\" -gt 0 ]; then echo 'Formatting errors:' && gofmt -s -l . && exit 1; fi", write = "gofmt -w -s ." }

[bun]
entry = "tests.ts"
versions = ["1.0"]
commands = { install = "bun install", start = "bun src/server.ts" }
formatter = { prepare = "echo \"Using bunx biome formatter\"", check = "bunx @biomejs/biome biome format .", write = "bunx @biomejs/biome format --write ." }
